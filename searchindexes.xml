<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>网络服务器设计原理及分析</title><url>/blog/network-server-design/</url><categories><category>技术</category></categories><tags><tag>服务器</tag><tag>事件驱动</tag></tags><content type="html">  在网络服务端编程中，服务器需要处理多个客户端的请求。为了提高性能，服务器通常会使用多种手段并发处理这些请求。基于非阻塞IO和事件驱动的并发机制可能是编写用户态高性能网络程序最成熟的模式。
一、操作系统基础 用户空间与内核空间 操作系统都采用虚拟存储器，系统可访问的虚拟存储空间就是系统自身的寻址空间，例如32位操作系统对应4G（2的32次方）的寻址空间。操作系统通过内核（kernel）访问底层硬件设备，用户进程则由内核进行调度管理。为了保证用户进程不直接操作内核，系统将虚拟存储空间分为内核空间和用户空间两部分。针对32位linux操作系统而言，将最高的1G字节（虚拟地址0xC0000000-0xFFFFFFFF）分配为内核空间，较低的3G字节（虚拟地址0x00000000-0xBFFFFFFF）分配为用户空间。
进程切换 内核进行进程切换时，主要有下列处理过程：
保存处理机上下文，包括程序计数器和其他寄存器。 更新内核空间中的PCB（进程控制块Process Control Block）信息。 把进程的PCB移入相应的队列，如就绪、某事件阻塞等队列。 选择另一个进程执行，并更新其PCB。 更新内存管理的数据结构。 恢复处理机上下文。 总而言之，进程切换很耗费资源。
进程有就绪、运行、阻塞三种基本状态。正在运行的进程，会因为请求系统资源失败、等待操作完成、新数据未到达或无新工作做等原因由系统自动执行阻塞原语（Block），使自己从运行状态变为阻塞状态，从而退出CPU资源的占用。
文件描述符 当程序打开现有文件或新建文件时，内核会维护一个该进程打开文件的记录表，并通过文件描述符（File Descriptor）来对该文件记录表进行索引。一些涉及底层I/O的程序编写往往会围绕文件描述符展开。
缓存I/O 当程序进行I/O访问操作时，操作系统会先将I/O的数据缓存到文件系统的页缓存（Page Cache）中，也就是说，数据会先被拷贝到操作系统的内核缓冲区中，再从内核缓冲区拷贝到应用程序的地址空间。因为缓存I/O机制的存在，数据在传输过程中需要在用户空间和内核空间进行多次数据拷贝操作，这些数据拷贝操作所带来的CPU及内存开销通常是很大的。以I/O的read操作为例，会经历两个阶段：
等待数据就绪 将数据从内核空间拷贝到用户进程空间中 围绕这两个阶段，Linux系统产生了下面五种 …  </content></entry><entry><title>关于</title><url>/about.html</url><categories/><tags/><content type="html">  人话版描述：
一个碳基生物的思维记录。 对技术原理有强烈的求知欲，着迷于技术革命导致的生产关系重构。 一些神叨叨的感兴趣主题：语言、维度、概率、混沌。 病理学描述：
一个碳基生物的思维病理学切片。 以人类形态执行「技术人类学」田野调查项目，研究重点包括：碳基生存焦虑、维度暴力、概率风暴、狄拉克海真空涨落。 碳基生物试图突破语言洛希极限时喷溅的认知星尘。   </content></entry></search>